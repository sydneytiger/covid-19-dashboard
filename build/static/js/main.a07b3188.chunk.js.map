{"version":3,"sources":["api/index.js","api/ApiCache.js","constaints.js","api/useCovidApi.js","components/Title.js","components/covid19/DataKeyDropDown.js","components/covid19/CountriesChart.js","components/covid19/GlobalStatistic.js","components/covid19/HistoryChart.js","components/covid19/HistoryChartsCountry.js","components/covid19/CovidApp.js","App.js","serviceWorker.js","index.js"],"names":["apiCache","key","window","localStorage","getItem","data","JSON","parse","value","setItem","stringify","removeItem","getKey","url","params","api","axios","create","baseURL","interceptors","request","use","config","method","toUpperCase","hasCache","cacheObj","getCache","Date","getTime","expire","console","log","headers","cached","result","Promise","reject","clearCache","requestInterceptor","response","status","setCache","responseInterceptor","error","resolve","errorInterceptor","useCovidApi","path","initialData","dataRefiner","refineData","useCallback","useState","setData","useEffect","then","resp","React","memo","text","style","textAlign","margin","DataKeyDropDown","dispatch","useContext","CovidContext","className","htmlFor","id","onChange","e","type","payload","target","CountriesChart","dataKey","state","slice","width","height","top","left","right","onClick","selected","activeLabel","strokeDasharray","fill","GlobalStatistic","cases","active","deaths","recovered","updated","toLocaleString","Intl","NumberFormat","format","ColorCode","Cases","Deaths","Recovered","HistoryChart","lastDays","onLastDaysChange","color","bottom","x1","y1","x2","y2","offset","stopColor","stopOpacity","stroke","fillOpacity","min","max","HistoryChartsCountry","selectedCountry","historyData","timeline","handleLastDayChange","transformHistory","Object","entries","map","entry","time","number","initState","countryData","reducer","action","loading","createContext","CovidApp","useReducer","globalData","Provider","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a07b3188.chunk.js","sourcesContent":["import axios from 'axios';\nimport ApiCache from './ApiCache';\nimport {base_url} from '../constaints';\n\nconst apiCache = new ApiCache();\nconst default_expire = 60 * 60 * 1000; // cache one hour\n\nconst requestInterceptor = config => {\n  if(config.method.toUpperCase() === 'GET'){\n    let { url, data, params} = config;\n    const key = getKey(url, data, params);\n  \n    if (apiCache.hasCache(key)) {\n      const cacheObj = apiCache.getCache(key);\n      const currentTime = new Date().getTime();\n      \n      if(currentTime < cacheObj.expire){\n        console.log('serving cached data');\n        config.headers.cached = true;\n        config.data = apiCache.getCache(key).result;\n        return Promise.reject(config);\n      } else {\n        apiCache.clearCache(key);\n      }\n    }\n  }\n\n  return config;\n}\n\nconst responseInterceptor = response => {\n  if(response.config.method.toUpperCase() === 'GET'){\n    if(response.status !== 200) return response.data;\n\n    let { url, data, params} = response.config;\n    const currentTime = new Date().getTime();\n    const cacheObj = {\n      expire: currentTime + default_expire,\n      params,\n      data,\n      result: response.data\n    }\n    const key = getKey(url, data, params);;\n    apiCache.setCache(key, cacheObj);\n  }\n\n  return response;\n}\n\nconst errorInterceptor = error => {\n  if (error.headers && error.headers.cached === true) {\n    return Promise.resolve(error);\n  }\n  return Promise.reject(error);\n}\n\nconst getKey = (url, data, params) => {\n  return data ? `${url}?cacheParams=${data}` : `${url}?cacheParams=${params}`;\n}\n\nconst api = axios.create({\n  baseURL: base_url\n});\n\napi.interceptors.request.use(\n  config => requestInterceptor(config)\n);\n\napi.interceptors.response.use(\n  response => responseInterceptor(response),\n  error => errorInterceptor(error)\n);\n\nexport default api;","export default class ApiCache {\n  hasCache(key) {\n    return !!window.localStorage.getItem(key)\n  }\n\n  getCache(key) {\n    const data = window.localStorage.getItem(key);\n    return JSON.parse(data);\n  }\n\n  setCache(key, value) {\n    window.localStorage.setItem(key, JSON.stringify(value));\n  }\n\n  clearCache(key) {\n    window.localStorage.removeItem(key);\n  }\n};","export const base_url = 'https://disease.sh';\nexport const us = '/v2/states/';\nexport const global = '/v2/all';\nexport const countries = '/v2/countries/';\nexport const history = '/v2/historical/';\n\n","import {useState, useEffect, useCallback} from 'react';\nimport api from './index';\n\n// A generic API custom hook for fetching covid 19 data\n// dataRefiner: a middleware like function transforming data between data source and UI\nfunction useCovidApi(path, \n  { \n    initialData = null, \n    dataRefiner = data => data\n  }) {\n  // improve performance\n  const refineData = useCallback(dataRefiner, []);\n  const [data, setData] = useState(initialData);\n \n  useEffect(() => {\n    api(path)\n    .then(resp => {\n      setData(refineData(resp.data))\n    })\n  }, [path, refineData]);\n  \n  return data;\n}\n\nexport default useCovidApi\n","import React from 'react'\n\nfunction Title({text}) {\n  return (\n    <div style={{textAlign:\"center\", margin:\"50px 0\"}}>\n        <h1>{text}</h1>\n    </div>\n  )\n}\n\nexport default React.memo(Title)\n","import React, { useContext } from 'react'\nimport { CovidContext } from './CovidApp';\n\nfunction DataKeyDropDown() {\n  const { dispatch } = useContext(CovidContext);\n\n  const onChange = e => {\n    dispatch({type: 'SET_DATAKEY', payload: e.target.value });\n  }\n\n  return (\n    <div className=\"center margin-top-l \">\n      <label htmlFor='key-select'>You concern on: </label>\n      <select id='key-select' onChange={onChange}>\n        <option value='cases'>Overall Cases</option>\n        <option value='deaths'>Overall Deaths</option>\n        <option value='todayCases'>Today Cases</option>\n        <option value='recovered'>Recovered</option>\n        <option value='active'>Active</option>\n      </select>\n    </div>\n  )\n}\n\nexport default DataKeyDropDown\n","import React, { useContext } from 'react';\nimport { BarChart, CartesianGrid, XAxis, YAxis, Tooltip, Legend, Bar } from 'recharts';\nimport { CovidContext } from './CovidApp';\nimport { countries } from '../../constaints';\nimport useCovidApi from '../../api/useCovidApi';\n\nfunction CountriesChart({data, dataKey}) {\n  const {state, dispatch} = useContext(CovidContext);\n\n  useCovidApi(`${countries}?sort=${state.dataKey}`, {\n    initialData: [],\n    dataRefiner: data => dispatch({ type: 'SET_COUNTRY_DATA', payload: data.slice(0, 10)})\n  });\n\n  const onClick = selected => {\n    dispatch({type: 'SET_COUNTRY', payload: selected.activeLabel});\n  }\n\n  return (\n    <BarChart\n      width={1200}\n      height={250}\n      style={{ margin: \"auto\" }}\n      margin={{ top: 30, left: 20, right: 30 }}\n      data={data}\n      onClick={onClick}\n      >\n        <CartesianGrid strokeDasharray='3 3' />\n        <XAxis dataKey='country' />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Bar dataKey={dataKey} fill='#1B4F72' />\n      </BarChart>\n  )\n}\n\nexport default CountriesChart\n","import React from 'react';\nimport '../../style/GlobalStatistic.css';\n\nfunction GlobalStatistic({ data }) {\n  const {cases, active, deaths, recovered, updated} = data;\n  return (\n    <>\n      <h5 className=\"center\">Updated on {new Date(updated).toLocaleString()}</h5>\n      <div className=\"globalStats-grid\">\n        <div>Cases:<span className=\"red\">{new Intl.NumberFormat().format(cases)}</span></div>\n        <div>Deaths: <span className=\"gray\">{new Intl.NumberFormat().format(deaths)}</span></div>\n        <div>Active: <span className=\"orange\">{new Intl.NumberFormat().format(active)}</span></div>\n        <div>Recovered: <span className=\"green\">{new Intl.NumberFormat().format(recovered)}</span></div>\n      </div>\n    </>\n  )\n}\n\nexport default GlobalStatistic\n","import React from 'react'\nimport { AreaChart, CartesianGrid, XAxis, YAxis, Tooltip, Area} from \"recharts\";\n\nconst ColorCode = {\n  Cases: \"#D0021B\",\n  Deaths: \"#4A4A4A\",\n  Recovered: \"#09C79C\",\n}\n\nfunction HistoryChart({dataKey, data, lastDays, onLastDaysChange }) {\n  const color = ColorCode[dataKey];\n  \n  return (\n    <div>\n      <AreaChart\n        width={400}\n        height={150}\n        data={data.slice(-lastDays)}\n        margin={{ top: 10, right: 30, left: 10, bottom: 0 }}\n      >\n        <defs>\n          <linearGradient id={dataKey} x1='0' y1='0' x2='0' y2='1'>\n            <stop offset='5%' stopColor={color} stopOpacity={0.8} />\n            <stop offset='95%' stopColor={color} stopOpacity={0} />\n          </linearGradient>\n        </defs>\n        <XAxis dataKey='time' />\n        <YAxis />\n        <CartesianGrid strokeDasharray='3 3' />\n        <Tooltip />\n        <Area\n          type='monotone'\n          dataKey='number'\n          stroke={color}\n          fillOpacity={1}\n          fill={`url(#${dataKey})`}\n        />\n      </AreaChart>\n      <h3>{dataKey}</h3>\n      <input type=\"range\" min=\"1\" max=\"30\" value={lastDays} onChange={onLastDaysChange} />\n      Last {lastDays} days\n    </div>\n  )\n}\n\nexport default HistoryChart\n","import React, { useContext } from 'react'\nimport {CovidContext} from './CovidApp';\nimport useCovidApi from '../../api/useCovidApi';\nimport { history } from '../../constaints';\nimport HistoryChart from './HistoryChart';\nimport '../../style/HistoryChartsCountry.css'\n\nfunction HistoryChartsCountry() {\n  const {state, dispatch} = useContext(CovidContext);\n  const {selectedCountry, lastDays, historyData} = state;\n\n  useCovidApi(`${history}${selectedCountry}`, {\n    initialData: {},\n    dataRefiner: data => dispatch({ type: 'SET_HISTORY_DATA', payload: data.timeline })\n  });\n\n  const handleLastDayChange = (e, key) => {\n    dispatch({ type: 'SET_LAST_DAYS', key, payload: e.target.value })\n  }\n\n  const transformHistory = (timeline = {}) => {\n    return Object.entries(timeline).map((entry) => {\n      const [time, number] = entry;\n      return { time, number };\n    });\n  }\n\n  return (\n    <div className=\"center\">\n      <h2>{selectedCountry} history data</h2>\n      <div className=\" history-group\">\n        <HistoryChart \n          dataKey=\"Cases\" \n          data={transformHistory(historyData.cases)} \n          lastDays={lastDays.cases} \n          onLastDaysChange={e => handleLastDayChange(e, 'cases')} />\n\n        <HistoryChart \n          dataKey=\"Deaths\" \n          data={transformHistory(historyData.deaths)} \n          lastDays={lastDays.deaths} \n          onLastDaysChange={e => handleLastDayChange(e, 'deaths')} />\n        \n        <HistoryChart \n          dataKey=\"Recovered\" \n          data={transformHistory(historyData.recovered)} \n          lastDays={lastDays.recovered} \n          onLastDaysChange={e => handleLastDayChange(e, 'recovered')} />\n      </div>\n    </div>\n  )\n}\n\nexport default HistoryChartsCountry\n","import React, {useReducer, useEffect} from 'react'\nimport useCovidApi from '../../api/useCovidApi';\nimport { global} from '../../constaints';\nimport Title from '../Title';\nimport DataKeyDropDown from './DataKeyDropDown';\nimport CountriesChart from './CountriesChart';\nimport GlobalStatistic from './GlobalStatistic';\nimport HistoryChartsCountry from './HistoryChartsCountry';\nimport '../../style/Covid19.css';\n\nconst initState = {\n  dataKey: 'cases',\n  selectedCountry: '',\n  countryData: [],\n  historyData:{},\n  error: null, \n  lastDays: {\n    cases: 30,\n    deaths: 30,\n    recovered: 30\n  }\n}\n\nconst reducer = (state, action) => {\n  switch(action.type) {\n    case 'SET_COUNTRY_DATA':\n      return { ...state, countryData: action.payload };\n    case 'SET_DATAKEY': \n      return { ...state, dataKey: action.payload }\n    case 'SET_COUNTRY':\n      return { ...state, selectedCountry: action.payload }\n    case 'SET_HISTORY_DATA':\n      return { ...state, historyData: action.payload }\n    case 'SET_LAST_DAYS': \n      return { ...state, lastDays: {...state.lastDays, [action.key]: action.payload }}\n    case 'ERROR':\n      return { ...initState, error: action.payload, loading: false };\n    default: \n      return state;\n  }\n}\n\nexport const CovidContext = React.createContext();\n\nexport function CovidApp() {\n  const [state, dispatch] = useReducer(reducer, initState);\n  const {dataKey, selectedCountry, countryData} = state;\n  const globalData = useCovidApi(global, { initialData: {}});\n\n  return (\n    <>\n      <Title text=\"Covide-19 Statistic\" />\n      <GlobalStatistic data={globalData} />\n      <CovidContext.Provider value={{ state, dispatch}} >\n        <DataKeyDropDown />\n        <CountriesChart data={countryData} dataKey={dataKey} />\n        {selectedCountry ? \n          <HistoryChartsCountry selectedCountry={selectedCountry}/>\n          : <div className=\"center\"><h3>Click on a country to show its history.</h3></div>\n        }\n      </CovidContext.Provider>\n    </>\n  )\n}\n\n","import React from 'react';\nimport './style/App.css';\nimport api from './api';\nimport { CovidApp } from './components/covid19/CovidApp';\n\nfunction App() {\n  window.api = api;\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <CovidApp />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}